package console

import (
	"fmt"

	"github.com/veandco/go-sdl2/img"
	"github.com/veandco/go-sdl2/sdl"

	"github.com/torlenor/asciiventure/renderers"
)

// Char holds the position, width and height of a char texture segment.
type Char struct {
	X int32 `json:"x"`
	Y int32 `json:"y"`

	Width  int32 `json:"width"`
	Height int32 `json:"height"`
}

func (c Char) String() string {
	return fmt.Sprintf("X: %d Y: %d W: %d H: %d", c.X, c.Y, c.Width, c.Height)
}

// FontTileSet provides the actual image texture and a way to retreive the correct texture coordinates
// to use it.
type FontTileSet struct {
	t *sdl.Texture

	charWidth  int32
	charHeight int32

	characters map[string]Char
}

// GetCharWidth returns the detected char width in pixel of the font texture.
func (f FontTileSet) GetCharWidth() int32 {
	return f.charWidth
}

// GetCharHeight returns the detected char height in pixel of the font texture.
func (f FontTileSet) GetCharHeight() int32 {
	return f.charHeight
}

func createTextureFromFile(renderer *renderers.Renderer, imagePath string) (*sdl.Texture, error) {
	image, err := img.Load(imagePath)
	if err != nil {
		return nil, fmt.Errorf("Failed to load image file: %s", err)
	}
	defer image.Free()

	texture, err := renderer.CreateTextureFromSurface(image)
	if err != nil {
		return nil, fmt.Errorf("Failed to create texture: %s", err)
	}

	return texture, nil
}

// NewFontTileset returns a new FontTileSet.
// Currently only libtcod format is supported (with extensions to the provided char set).
func NewFontTileset(renderer *renderers.Renderer, imagePath string) (*FontTileSet, error) {
	texture, err := createTextureFromFile(renderer, imagePath)
	if err != nil {
		return nil, fmt.Errorf("Error creating font: %s", err)
	}

	font := FontTileSet{
		t: texture,
	}

	_, _, width, height, err := texture.Query()
	if err != nil {
		return nil, fmt.Errorf("Error determining texture size: %s", err)
	}
	if width%32 != 0 {
		return nil, fmt.Errorf("Not a valid default font image, width not dividable by 32")
	}
	if height%8 != 0 {
		return nil, fmt.Errorf("Not a valid default font image, height not dividable by 8")
	}

	runes := []rune{
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
		0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
		0x40, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x7B,
		0x7C, 0x7D, 0x7E, 0x2591, 0x2592, 0x2593, 0x2502, 0x2500,
		0x253C, 0x2524, 0x2534, 0x251C, 0x252C, 0x2514, 0x250C, 0x2510,
		0x2518, 0x2598, 0x259D, 0x2580, 0x2596, 0x259A, 0x2590, 0x2597,
		0x2191, 0x2193, 0x2190, 0x2192, 0x25B2, 0x25BC, 0x25C4, 0x25BA,
		0x2195, 0x2194, 0x2610, 0x2611, 0x25CB, 0x25C9, 0x2551, 0x2550,
		0x256C, 0x2563, 0x2569, 0x2560, 0x2566, 0x255A, 0x2554, 0x2557,
		0x255D, 'Â·', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
		0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
		0x59, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
		0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
		0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
		0x79, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	font.characters = make(map[string]Char)

	dx := int32(width / 32)
	dy := int32(height / 8)
	for y := int32(0); y < 8; y++ {
		for x := int32(0); x < 32; x++ {
			r := runes[int(y*32+x)]
			font.characters[string(r)] = Char{X: x * dx, Y: y * dy, Width: dx, Height: dy}
		}
	}

	font.charWidth = dx
	font.charHeight = dy

	return &font, nil
}

// Get returns a glyph with Dst set to render at origin (0,0).
// Returns true as second value if the operation was successfull.
func (f *FontTileSet) Get(c string) (renderers.RenderGlyph, error) {
	if a, ok := f.characters[c]; ok {
		return renderers.RenderGlyph{T: f.t, Src: &sdl.Rect{X: int32(a.X), Y: int32(a.Y), W: int32(a.Width), H: int32(a.Height)}}, nil
	}
	return renderers.RenderGlyph{}, fmt.Errorf("Glyph for char '%s' not found", c)
}
